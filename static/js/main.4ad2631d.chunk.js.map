{"version":3,"sources":["audioFiles/Bass Warwick heavy funk groove on E 120 BPM.mp3","StoreProvider.js","StoreContext.js","audioFiles/120_future_funk_beats_25.mp3","audioFiles/120_stutter_breakbeats_16.mp3","audioFiles/electric guitar coutry slide 120bpm - B.mp3","audioFiles/FUD_120_StompySlosh.mp3","audioFiles/GrooveB_120bpm_Tanggu.mp3","audioFiles/MazePolitics_120_Perc.mp3","audioFiles/PAS3GROOVE1.03B.mp3","audioFiles/SilentStar_120_Em_OrganSynth.mp3","components/OnePad.js","components/AllPads.js","Record.js","components/ControlRow.js","components/Records.js","background.jpg","App.js","reportWebVitals.js","index.js"],"names":["configure","useProxies","storeInstance","playTime","isPlayed","isRecorded","isAll","beatsRate","gumStream","recordedUrl","bass","bass_funk","makeObservable","this","observable","Date","getTime","status","str","num","stream","rec","record","delayedTime","url","StoreContext","React","createContext","rotate","keyframes","PadDiv","styled","div","props","clicked","IconDiv","ClickedPadDiv","OnePad","beat","useState","setClicked","store","useContext","selectedBeat","useRef","icon","handleClick","setIsPlayed","setIsAll","useEffect","current","currentTime","parseInt","syncTime","getDelayedTime","playbackRate","getBeatsRate","play","pause","load","loop","useObserver","onClick","ref","src","data","autoPlay","future_funk","style","fontSize","stutter_break","electric_guitar","stompy_slosh","groove_tango","maze_politics","pas_groove","silent_star","AllPadsDiv","AllPads","map","d","i","Record","source","cfg","config","bufferLen","numChannels","mimeType","recording","callbacks","getBuffer","exportWAV","Object","assign","context","node","createScriptProcessor","createJavaScriptNode","call","onaudioprocess","e","buffer","channel","push","inputBuffer","getChannelData","worker","postMessage","command","connect","destination","InlineWorker","sampleRate","recLength","recBuffers","initBuffers","mergeBuffers","result","Float32Array","offset","length","set","writeString","view","string","setUint8","charCodeAt","onmessage","type","interleaved","buffers","inputL","inputR","index","inputIndex","interleave","dataview","samples","ArrayBuffer","DataView","setUint32","setUint16","output","input","s","Math","max","min","setInt16","floatTo16BitPCM","encodeWAV","audioBlob","Blob","cb","pop","callback","Error","blob","filename","window","URL","webkitURL","createObjectURL","link","document","createElement","href","download","click","createEvent","initEvent","dispatchEvent","pulse","RecordingButtonDiv","ControlDiv","BeatRateDiv","ControlRow","setRecord","handleStop","createDownloadLink","setRecordedUrl","setIsRecorded","setBeatsRate","cursor","color","navigator","mediaDevices","getDisplayMedia","audio","video","then","audioContext","AudioContext","setGumStream","createMediaStreamSource","catch","err","console","log","message","stop","getAudioTracks","stopRecording","RecordDiv","Records","setRecords","selectedAudio","controls","AppDiv","WholeAppDiv","background","HeaderDiv","observer","paddingbottom","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","Provider","value","getElementById"],"mappings":"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","file":"static/js/main.4ad2631d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Bass Warwick heavy funk groove on E 120 BPM.52c24c81.mp3\";","import { observable, makeObservable } from \"mobx\";\r\nimport { configure } from \"mobx\";\r\nimport bass_funk from \"./audioFiles/Bass Warwick heavy funk groove on E 120 BPM.mp3\";\r\n\r\nconfigure({\r\n  useProxies: \"always\",\r\n});\r\n\r\n//Set store to save and observale global variables\r\nclass Store {\r\n  constructor() {\r\n    makeObservable(this, {\r\n        playTime: observable,\r\n        isPlayed: observable,\r\n        isRecorded:observable,\r\n        isAll:observable,\r\n        beatsRate: observable,\r\n        gumStream:observable,\r\n        recordedUrl:observable,\r\n        bass:observable,\r\n    });\r\n  }\r\n   playTime = 0;\r\n   isPlayed=\"none\";\r\n   isRecorded=\"none\";\r\n   isAll=\"none\";\r\n   beatsRate =1;\r\n   gumStream = {};\r\n   recordedUrl = '';\r\n   bass = bass_funk;\r\n\r\n  get getPlayTime() {\r\n    return this.playTime = new Date().getTime()/1000\r\n  }\r\n  get getDelayedTime() {\r\n    return  new Date().getTime()/1000\r\n  }\r\n  get getBeatsRate() {\r\n      return this.beatsRate;\r\n  }\r\n  get getIsPlayed() {\r\n    return this.isPlayed;\r\n  }\r\n\r\n\r\nsetIsPlayed(status){\r\n    return this.isPlayed=status;\r\n}\r\nsetIsRecorded(status){\r\n    return this.isRecorded=status;\r\n}\r\n\r\nsetIsAll(str){\r\nreturn this.isAll=str;\r\n}\r\nsetBeatsRate(num){\r\n    return this.beatsRate = num;\r\n}\r\n\r\nsetGumStream(stream){\r\n  return this.gumStream = stream;\r\n}\r\nsetRecord(rec){\r\n  return this.record = rec;\r\n}\r\n  syncTime(playTime,delayedTime) {\r\n    return ((delayedTime - playTime))%8\r\n  }\r\n  setRecordedUrl(url){\r\n    return this.recordedUrl = url;\r\n   }\r\n}\r\n\r\nexport const storeInstance = new Store();\r\n","import React from 'react';\r\nimport {storeInstance} from './StoreProvider'\r\nexport const StoreContext = React.createContext(storeInstance);","export default __webpack_public_path__ + \"static/media/120_future_funk_beats_25.5eb417fc.mp3\";","export default __webpack_public_path__ + \"static/media/120_stutter_breakbeats_16.37c82282.mp3\";","export default __webpack_public_path__ + \"static/media/electric guitar coutry slide 120bpm - B.230fcab8.mp3\";","export default __webpack_public_path__ + \"static/media/FUD_120_StompySlosh.27bdc145.mp3\";","export default __webpack_public_path__ + \"static/media/GrooveB_120bpm_Tanggu.3e1411b4.mp3\";","export default __webpack_public_path__ + \"static/media/MazePolitics_120_Perc.2d08c654.mp3\";","export default __webpack_public_path__ + \"static/media/PAS3GROOVE1.03B.f77c6da4.mp3\";","export default __webpack_public_path__ + \"static/media/SilentStar_120_Em_OrganSynth.f2d668af.mp3\";","import React, { useRef, useEffect, useState } from \"react\";\r\nimport styled, { keyframes } from \"styled-components\";\r\nimport { StoreContext } from \"../StoreContext\";\r\nimport { useObserver } from \"mobx-react\";\r\n\r\nfunction OnePad({ beat }) {\r\n  const [clicked, setClicked] = useState(\"off\");\r\n  const store = React.useContext(StoreContext);\r\n  const selectedBeat = useRef(null);\r\n  const icon = beat.icon;\r\n\r\n  //Handling the click on each pad and set his state\r\n  const handleClick = () => {\r\n    if (store.isPlayed === \"stop\" && clicked === \"off\") {\r\n      store.setIsPlayed(\"none\");\r\n    }\r\n    if (store.isPlayed === \"play\" && clicked === \"on\") {\r\n      store.setIsAll(\"none\");\r\n    }\r\n    clicked === \"off\" ? setClicked(\"on\") : setClicked(\"off\");\r\n  };\r\n\r\n  //That useEffect listen to relevant changes at the store and play the audio files\r\n  useEffect(() => {\r\n    if (store.isPlayed === \"play\" && clicked === \"on\") {\r\n      selectedBeat.current.currentTime = parseInt(store.syncTime(store.playTime, store.getDelayedTime));\r\n      selectedBeat.current.playbackRate = store.getBeatsRate;\r\n      selectedBeat.current.play();\r\n    } else if (\r\n      store.isAll === \"all\" &&\r\n      (store.isPlayed === \"none\" || store.isPlayed === \"play\") && clicked === \"off\") {\r\n      setClicked(\"on\");\r\n    } else if (store.isPlayed === \"stop\" && clicked === \"on\") {\r\n      setClicked(\"off\");\r\n    } else {\r\n      selectedBeat.current.pause();\r\n    }\r\n  }, [store.isPlayed, store.isAll, clicked, store.beatsRate]);\r\n\r\n  useEffect(() => {\r\n    selectedBeat.current.load();\r\n    selectedBeat.current.loop = true;\r\n  }, []);\r\n\r\n  return useObserver(() => (\r\n    <PadDiv\r\n      clicked={clicked}\r\n      onClick={handleClick}\r\n      isPlayed={store.isPlayed}\r\n      isAll={store.isAll}\r\n      beatsRate={store.beatsRate}\r\n    >\r\n      {store.isPlayed === \"play\" && clicked === \"on\" ? (\r\n        <ClickedPadDiv clicked={clicked} isPlayed={store.isPlayed}>\r\n          {\" \"}\r\n          {icon}\r\n        </ClickedPadDiv>\r\n      ) : (\r\n        <IconDiv clicked={clicked} isPlayed={store.isPlayed}>\r\n          {\" \"}\r\n          {icon}\r\n        </IconDiv>\r\n      )}\r\n      <audio ref={selectedBeat} src={beat.data} autoPlay={false}></audio>\r\n    </PadDiv>\r\n  ));\r\n}\r\n\r\nconst rotate = keyframes`\r\n  from {\r\n    transform: rotate(0deg);\r\n  }\r\n\r\n  to {\r\n    transform: rotate(360deg);\r\n  }\r\n`;\r\n\r\nconst PadDiv = styled.div`\r\n  position: relative;\r\n  background: ${(props) => (props.clicked === \"on\"||props.isAll === \"all\"? \"#FFFACD\" : \"#708090\")};\r\n  text-align: center;\r\n  border-style: dotted;\r\n  border-color: ${(props) =>\r\n    props.isPlayed === \"play\" && props.clicked === \"on\" ? \"green\" : \"red\"};\r\n  :hover {\r\n    background-color: #BDB76B;\r\n  }\r\n`;\r\nconst IconDiv = styled.div`\r\n  position: absolute;\r\n  align-items: center;\r\n  position: absolute;\r\n  top: 22%;\r\n  left: 22%;\r\n`;\r\nconst ClickedPadDiv = styled.div`\r\n  align-items: center;\r\n  align-items: center;\r\n  position: absolute;\r\n  top: 22%;\r\n  left: 22%;\r\n  animation: ${rotate} 2s linear infinite;\r\n`;\r\n\r\nexport default OnePad;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport future_funk from \"../audioFiles/120_future_funk_beats_25.mp3\";\r\nimport stutter_break from \"../audioFiles/120_stutter_breakbeats_16.mp3\";\r\nimport bass_funk from \"../audioFiles/Bass Warwick heavy funk groove on E 120 BPM.mp3\";\r\nimport electric_guitar from \"../audioFiles/electric guitar coutry slide 120bpm - B.mp3\";\r\nimport stompy_slosh from \"../audioFiles/FUD_120_StompySlosh.mp3\";\r\nimport groove_tango from \"../audioFiles/GrooveB_120bpm_Tanggu.mp3\";\r\nimport maze_politics from \"../audioFiles/MazePolitics_120_Perc.mp3\";\r\nimport pas_groove from \"../audioFiles/PAS3GROOVE1.03B.mp3\";\r\nimport silent_star from \"../audioFiles/SilentStar_120_Em_OrganSynth.mp3\";\r\nimport OnePad from \"./OnePad\";\r\nimport { SiDiscogs, SiBeatport, SiGroovy } from \"react-icons/si\";\r\nimport { CgSandClock } from \"react-icons/cg\";\r\nimport { FaDrumSteelpan } from \"react-icons/fa\";\r\nimport {\r\n  GiGuitarBassHead,\r\n  GiGuitar,\r\n  GiMazeSaw,\r\n  GiCursedStar,\r\n} from \"react-icons/gi\";\r\nimport { useObserver } from \"mobx-react\";\r\n\r\n//Inserting into an array of objects the beats and icons\r\nconst data = [\r\n  { data: future_funk, icon: <SiDiscogs style={{ fontSize: \"50px\" }} /> },\r\n  { data: stutter_break, icon: <CgSandClock style={{ fontSize: \"50px\" }} /> },\r\n  { data: bass_funk, icon: <GiGuitarBassHead style={{ fontSize: \"50px\" }} /> },\r\n  { data: electric_guitar, icon: <GiGuitar style={{ fontSize: \"50px\" }} /> },\r\n  { data: stompy_slosh, icon: <FaDrumSteelpan style={{ fontSize: \"50px\" }} /> },\r\n  { data: groove_tango, icon: <SiBeatport style={{ fontSize: \"50px\" }} /> },\r\n  { data: maze_politics, icon: <GiMazeSaw style={{ fontSize: \"50px\" }} /> },\r\n  { data: pas_groove, icon: <SiGroovy style={{ fontSize: \"50px\" }} /> },\r\n  { data: silent_star, icon: <GiCursedStar style={{ fontSize: \"50px\" }} /> },\r\n];\r\n\r\nfunction AllPads() {\r\n  return useObserver(() => (\r\n    //Mapping the beats to onePad components and give each one another beat\r\n    <AllPadsDiv>\r\n      {data.map((d, i) => {\r\n        return (\r\n          <OnePad\r\n            beat={d}\r\n            key={i}\r\n          />\r\n        );\r\n      })}\r\n    </AllPadsDiv>\r\n  ));\r\n}\r\n\r\nconst AllPadsDiv = styled.div`\r\n  position: center;\r\n  display: grid;\r\n  grid-template-columns: repeat(3, 1fr);\r\n  grid-gap: 10px;\r\n  height: 300px;\r\n  width: 300px;\r\n  position: relative;\r\n  bottom: 20px;\r\n`;\r\n\r\nexport default AllPads;\r\n","import InlineWorker from \"inline-worker\";\r\n\r\nclass Record {\r\n  config = {\r\n    bufferLen: 4096,\r\n    numChannels: 2,\r\n    mimeType: \"audio/wav\",\r\n  };\r\n\r\n  recording = false;\r\n\r\n  callbacks = {\r\n    getBuffer: [],\r\n    exportWAV: [],\r\n  };\r\n\r\n  constructor(source, cfg) {\r\n    Object.assign(this.config, cfg);\r\n    this.context = source.context;\r\n    this.node = (this.context.createScriptProcessor || this.context.createJavaScriptNode).call(\r\n      this.context,\r\n      this.config.bufferLen,\r\n      this.config.numChannels,\r\n      this.config.numChannels\r\n    );\r\n\r\n    this.node.onaudioprocess = (e) => {\r\n      if (!this.recording) return;\r\n\r\n      var buffer = [];\r\n      for (var channel = 0; channel < this.config.numChannels; channel++) {\r\n        buffer.push(e.inputBuffer.getChannelData(channel));\r\n      }\r\n      this.worker.postMessage({\r\n        command: \"record\",\r\n        buffer: buffer,\r\n      });\r\n    };\r\n\r\n    source.connect(this.node);\r\n    this.node.connect(this.context.destination); //this should not be necessary\r\n\r\n    let self = {};\r\n    this.worker = new InlineWorker(function () {\r\n      let recLength = 0,\r\n        recBuffers = [],\r\n        sampleRate,\r\n        numChannels;\r\n\r\n      this.onmessage = function (e) {\r\n        switch (e.data.command) {\r\n          case \"init\":\r\n            init(e.data.config);\r\n            break;\r\n          case \"record\":\r\n            record(e.data.buffer);\r\n            break;\r\n          case \"exportWAV\":\r\n            exportWAV(e.data.type);\r\n            break;\r\n          case \"getBuffer\":\r\n            getBuffer();\r\n            break;\r\n          case \"clear\":\r\n            clear();\r\n            break;\r\n        }\r\n      };\r\n\r\n      function init(config) {\r\n        sampleRate = config.sampleRate;\r\n        numChannels = config.numChannels;\r\n        initBuffers();\r\n      }\r\n\r\n      function record(inputBuffer) {\r\n        for (var channel = 0; channel < numChannels; channel++) {\r\n          recBuffers[channel].push(inputBuffer[channel]);\r\n        }\r\n        recLength += inputBuffer[0].length;\r\n      }\r\n\r\n      function exportWAV(type) {\r\n        let buffers = [];\r\n        for (let channel = 0; channel < numChannels; channel++) {\r\n          buffers.push(mergeBuffers(recBuffers[channel], recLength));\r\n        }\r\n        let interleaved;\r\n        if (numChannels === 2) {\r\n          interleaved = interleave(buffers[0], buffers[1]);\r\n        } else {\r\n          interleaved = buffers[0];\r\n        }\r\n        let dataview = encodeWAV(interleaved);\r\n        let audioBlob = new Blob([dataview], { type: type });\r\n\r\n        this.postMessage({ command: \"exportWAV\", data: audioBlob });\r\n      }\r\n\r\n      function getBuffer() {\r\n        let buffers = [];\r\n        for (let channel = 0; channel < numChannels; channel++) {\r\n          buffers.push(mergeBuffers(recBuffers[channel], recLength));\r\n        }\r\n        this.postMessage({ command: \"getBuffer\", data: buffers });\r\n      }\r\n\r\n      function clear() {\r\n        recLength = 0;\r\n        recBuffers = [];\r\n        initBuffers();\r\n      }\r\n\r\n      function initBuffers() {\r\n        for (let channel = 0; channel < numChannels; channel++) {\r\n          recBuffers[channel] = [];\r\n        }\r\n      }\r\n\r\n      function mergeBuffers(recBuffers, recLength) {\r\n        let result = new Float32Array(recLength);\r\n        let offset = 0;\r\n        for (let i = 0; i < recBuffers.length; i++) {\r\n          result.set(recBuffers[i], offset);\r\n          offset += recBuffers[i].length;\r\n        }\r\n        return result;\r\n      }\r\n\r\n      function interleave(inputL, inputR) {\r\n        let length = inputL.length + inputR.length;\r\n        let result = new Float32Array(length);\r\n\r\n        let index = 0,\r\n          inputIndex = 0;\r\n\r\n        while (index < length) {\r\n          result[index++] = inputL[inputIndex];\r\n          result[index++] = inputR[inputIndex];\r\n          inputIndex++;\r\n        }\r\n        return result;\r\n      }\r\n\r\n      function floatTo16BitPCM(output, offset, input) {\r\n        for (let i = 0; i < input.length; i++, offset += 2) {\r\n          let s = Math.max(-1, Math.min(1, input[i]));\r\n          output.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7fff, true);\r\n        }\r\n      }\r\n\r\n      function writeString(view, offset, string) {\r\n        for (let i = 0; i < string.length; i++) {\r\n          view.setUint8(offset + i, string.charCodeAt(i));\r\n        }\r\n      }\r\n\r\n      function encodeWAV(samples) {\r\n        let buffer = new ArrayBuffer(44 + samples.length * 2);\r\n        let view = new DataView(buffer);\r\n\r\n        /* RIFF identifier */\r\n        writeString(view, 0, \"RIFF\");\r\n        /* RIFF chunk length */\r\n        view.setUint32(4, 36 + samples.length * 2, true);\r\n        /* RIFF type */\r\n        writeString(view, 8, \"WAVE\");\r\n        /* format chunk identifier */\r\n        writeString(view, 12, \"fmt \");\r\n        /* format chunk length */\r\n        view.setUint32(16, 16, true);\r\n        /* sample format (raw) */\r\n        view.setUint16(20, 1, true);\r\n        /* channel count */\r\n        view.setUint16(22, numChannels, true);\r\n        /* sample rate */\r\n        view.setUint32(24, sampleRate, true);\r\n        /* byte rate (sample rate * block align) */\r\n        view.setUint32(28, sampleRate * 4, true);\r\n        /* block align (channel count * bytes per sample) */\r\n        view.setUint16(32, numChannels * 2, true);\r\n        /* bits per sample */\r\n        view.setUint16(34, 16, true);\r\n        /* data chunk identifier */\r\n        writeString(view, 36, \"data\");\r\n        /* data chunk length */\r\n        view.setUint32(40, samples.length * 2, true);\r\n\r\n        floatTo16BitPCM(view, 44, samples);\r\n\r\n        return view;\r\n      }\r\n    }, self);\r\n\r\n    this.worker.postMessage({\r\n      command: \"init\",\r\n      config: {\r\n        sampleRate: this.context.sampleRate,\r\n        numChannels: this.config.numChannels,\r\n      },\r\n    });\r\n\r\n    this.worker.onmessage = (e) => {\r\n      let cb = this.callbacks[e.data.command].pop();\r\n      if (typeof cb == \"function\") {\r\n        cb(e.data.data);\r\n      }\r\n    };\r\n  }\r\n\r\n  record() {\r\n    this.recording = true;\r\n  }\r\n\r\n  stop() {\r\n    this.recording = false;\r\n  }\r\n\r\n  clear() {\r\n    this.worker.postMessage({ command: \"clear\" });\r\n  }\r\n\r\n  getBuffer(cb) {\r\n    cb = cb || this.config.callback;\r\n    if (!cb) throw new Error(\"Callback not set\");\r\n\r\n    this.callbacks.getBuffer.push(cb);\r\n\r\n    this.worker.postMessage({ command: \"getBuffer\" });\r\n  }\r\n\r\n  exportWAV(cb, mimeType) {\r\n    mimeType = mimeType || this.config.mimeType;\r\n    cb = cb || this.config.callback;\r\n    if (!cb) throw new Error(\"Callback not set\");\r\n\r\n    this.callbacks.exportWAV.push(cb);\r\n\r\n    this.worker.postMessage({\r\n      command: \"exportWAV\",\r\n      type: mimeType,\r\n    });\r\n  }\r\n\r\n  static forceDownload(blob, filename) {\r\n    let url = (window.URL || window.webkitURL).createObjectURL(blob);\r\n    let link = window.document.createElement(\"a\");\r\n    link.href = url;\r\n    link.download = filename || \"output.wav\";\r\n    let click = document.createEvent(\"Event\");\r\n    click.initEvent(\"click\", true, true);\r\n    link.dispatchEvent(click);\r\n  }\r\n}\r\n\r\nexport default Record;","import React, { useState } from \"react\";\r\nimport styled, { keyframes } from \"styled-components\";\r\nimport { AiFillPlayCircle, AiFillPauseCircle } from \"react-icons/ai\";\r\nimport { HiStop } from \"react-icons/hi\";\r\nimport { TiThSmallOutline } from \"react-icons/ti\";\r\nimport { MdKeyboardVoice, MdLooksOne } from \"react-icons/md\";\r\nimport { GiTurtle, GiHorseHead } from \"react-icons/gi\";\r\nimport { RiStopCircleLine } from \"react-icons/ri\";\r\nimport { StoreContext } from \"../StoreContext\";\r\nimport { useObserver } from \"mobx-react\";\r\nimport Record from \"../Record\";\r\n\r\nfunction ControlRow() {\r\n  const store = React.useContext(StoreContext);\r\n  const [record, setRecord] = useState(null);\r\n\r\n  //When stop is clicked set the relevant states\r\n  const handleStop = () => {\r\n    return store.setIsAll(\"none\") && store.setIsPlayed(\"stop\");\r\n  };\r\n  const handlePause = () => {\r\n    return store.setIsAll(\"none\") && store.setIsPlayed(\"pause\");\r\n  };\r\n\r\n  //the function that responsible for start recording\r\n  const startRecording = () => {\r\n    var constraints = {\r\n      audio: true,\r\n      video: true,\r\n    };\r\n    navigator.mediaDevices\r\n      .getDisplayMedia(constraints)\r\n      .then(function (stream) {\r\n        var audioContext = new window.AudioContext();\r\n        store.setGumStream(stream);\r\n        /* use the stream */\r\n        var input = audioContext.createMediaStreamSource(stream);\r\n        /* Create the Recorder object and configure to record mono sound (1 channel) Recording 2 channels will double the file size */\r\n        let record = new Record(input, {\r\n          numChannels: 1,\r\n        });\r\n        //start the recording process\r\n        record.record();\r\n        store.setIsRecorded(\"on\");\r\n        setRecord(record);\r\n      })\r\n      .catch(function (err) {\r\n        console.log(err.message);\r\n        store.setIsRecorded(\"off\");\r\n      });\r\n  };\r\n\r\n  //the function that responsible for stop and save the record to the store\r\n  const stopRecording = () => {\r\n    console.log(\"stopButton clicked\");\r\n    try {\r\n      record.stop(); //stop microphone access\r\n      store.gumStream.getAudioTracks()[0].stop();\r\n      //create the wav blob and pass it on to createDownloadLink\r\n      record.exportWAV(createDownloadLink);\r\n    } catch (err) {\r\n      store.setIsRecorded(\"off\");\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  // function that make the url and set the store\r\n  const createDownloadLink = (blob) => {\r\n    var url = URL.createObjectURL(blob);\r\n    store.setRecordedUrl(url);\r\n    store.setIsRecorded(\"off\");\r\n  };\r\n\r\n  return useObserver(() => (\r\n    <>\r\n      <BeatRateDiv>\r\n        {store.beatsRate === 0.5 ? (\r\n          <GiTurtle\r\n            onClick={() => store.setBeatsRate(0.5)}\r\n            style={{ cursor: \"pointer\", fontSize: \"25px\", color: \"green\" }}\r\n          />\r\n        ) : (\r\n          <GiTurtle\r\n            onClick={() => store.setBeatsRate(0.5)}\r\n            style={{ cursor: \"pointer\", fontSize: \"25px\" }}\r\n          />\r\n        )}\r\n        {store.beatsRate === 1 ? (\r\n          <MdLooksOne\r\n            onClick={() => store.setBeatsRate(1)}\r\n            style={{ cursor: \"pointer\", fontSize: \"25px\", color: \"green\" }}\r\n          />\r\n        ) : (\r\n          <MdLooksOne\r\n            onClick={() => store.setBeatsRate(1)}\r\n            style={{ cursor: \"pointer\", fontSize: \"25px\" }}\r\n          />\r\n        )}\r\n        {store.beatsRate === 2 ? (\r\n          <GiHorseHead\r\n            onClick={() => store.setBeatsRate(2)}\r\n            style={{ cursor: \"pointer\", fontSize: \"25px\", color: \"green\" }}\r\n          />\r\n        ) : (\r\n          <GiHorseHead\r\n            onClick={() => store.setBeatsRate(2)}\r\n            style={{ cursor: \"pointer\", fontSize: \"25px\" }}\r\n          />\r\n        )}\r\n      </BeatRateDiv>\r\n      <ControlDiv>\r\n        {store.isPlayed === \"play\" ? (\r\n          <AiFillPlayCircle\r\n            onClick={() => store.setIsPlayed(\"play\")}\r\n            style={{ cursor: \"pointer\", fontSize: \"35px\", color: \"#4169E1\" }}\r\n          />\r\n        ) : (\r\n          <AiFillPlayCircle\r\n            onClick={() => store.setIsPlayed(\"play\")}\r\n            style={{ cursor: \"pointer\", fontSize: \"35px\" }}\r\n          />\r\n        )}\r\n        {store.isPlayed === \"pause\" ? (\r\n          <AiFillPauseCircle\r\n            style={{ cursor: \"pointer\", fontSize: \"35px\", color: \"lightGrey\" }}\r\n          />\r\n        ) : (\r\n          <AiFillPauseCircle\r\n            onClick={() => handlePause()}\r\n            style={{ cursor: \"pointer\", fontSize: \"35px\" }}\r\n          />\r\n        )}\r\n        {store.isPlayed === \"stop\" ? (\r\n          <HiStop\r\n            onClick={() => handleStop()}\r\n            style={{ cursor: \"pointer\", fontSize: \"35px\", color: \"red\" }}\r\n          />\r\n        ) : (\r\n          <HiStop\r\n            onClick={() => handleStop()}\r\n            style={{ cursor: \"pointer\", fontSize: \"35px\" }}\r\n          />\r\n        )}\r\n        {store.isAll === \"all\" ? (\r\n          <TiThSmallOutline\r\n            onClick={() => store.setIsAll(\"all\")}\r\n            style={{ cursor: \"pointer\", fontSize: \"35px\",color:\"#FFD700\" }}\r\n          />\r\n        ) : (\r\n          <TiThSmallOutline\r\n            onClick={() => store.setIsAll(\"all\")}\r\n            style={{ cursor: \"pointer\", fontSize: \"35px\" }}\r\n          />\r\n        )}\r\n        {store.isRecorded === \"on\" ? (\r\n          <RecordingButtonDiv>\r\n            {\" \"}\r\n            <MdKeyboardVoice style={{ color: \"red\" }} />\r\n          </RecordingButtonDiv>\r\n        ) : (\r\n          <MdKeyboardVoice\r\n            onClick={() => startRecording()}\r\n            style={{ cursor: \"pointer\", fontSize: \"35px\" }}\r\n          />\r\n        )}\r\n        {store.isRecorded === \"on\" ? (\r\n          <RiStopCircleLine\r\n            onClick={() => stopRecording()}\r\n            style={{ cursor: \"pointer\", fontSize: \"25px\", color: \"black\" }}\r\n          />\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </ControlDiv>\r\n    </>\r\n  ));\r\n}\r\n\r\nconst pulse = keyframes`{\r\n\t0%{\r\n\t\tbox-shadow: 0px 0px 5px 0px rgba(173,0,0,.3);\r\n\t}\r\n\t65%{\r\n\t\tbox-shadow: 0px 0px 5px 13px rgba(173,0,0,.3);\r\n\t}\r\n\t90%{\r\n\t\tbox-shadow: 0px 0px 5px 13px rgba(173,0,0,0);\r\n\t}\r\n}`;\r\n\r\nconst RecordingButtonDiv = styled.div`\r\n  cursor: pointer;\r\n  font-size: 35px;\r\n  animation: ${pulse} 2s linear infinite;\r\n  color: \"red\";\r\n`;\r\n\r\nconst ControlDiv = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: space-evenly;\r\n  align-items: center;\r\n  width: 350px;\r\n  height: 45px;\r\n  background-color: #bdb76b;\r\n  border-radius: 25px;\r\n  position: relative;\r\n  bottom: 80px;\r\n`;\r\nconst BeatRateDiv = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: space-evenly;\r\n  align-items: center;\r\n  width: 100px;\r\n  height: 30px;\r\n  background-color: #bdb76b;\r\n  border-radius: 25px;\r\n  margin-top: 25px;\r\n  position: relative;\r\n  bottom: 80px;\r\n`;\r\nexport default ControlRow;\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport { StoreContext } from \"../StoreContext\";\r\nimport { useObserver } from \"mobx-react\";\r\nimport styled  from \"styled-components\";\r\n\r\nfunction Records() {\r\n  const [records, setRecords] = useState(\"\");\r\n  const store = React.useContext(StoreContext);\r\n  const selectedAudio = useRef(null);\r\n\r\n//useEffect thay waiting to recieve the recording url\r\n  useEffect(() => {\r\n    setRecords(store.recordedUrl);\r\n    if (store.recordedUrl) {\r\n      selectedAudio.current.load();\r\n      selectedAudio.current.loop = true;\r\n    }\r\n  }, [store.recordedUrl]);\r\n\r\n  return useObserver(() =>\r\n    store.recordedUrl === \"\" && store.isRecorded === \"off\" ? (\r\n      <RecordDiv>Please mark the audio share when recording</RecordDiv>\r\n    ) : (\r\n      <RecordDiv>\r\n        <audio\r\n          ref={selectedAudio}\r\n          src={store.recordedUrl}\r\n          autoPlay={false}\r\n          controls\r\n        >\r\n          <source src={store.recordedUrl} type=\"audio/ogg\" />\r\n          <source src={store.recordedUrl} type=\"audio/mpeg\" />\r\n        </audio>\r\n      </RecordDiv>\r\n    )\r\n  );\r\n}\r\nconst RecordDiv = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: space-evenly;\r\n  align-items: center;\r\n  width: 250px;\r\n  height: 40px;\r\n  border-radius: 25px;\r\n  position: relative;\r\n  bottom: 50px;\r\n  color:#bdb76b;\r\n`;\r\n\r\nexport default Records;\r\n","export default __webpack_public_path__ + \"static/media/background.44c3644e.jpg\";","import React from \"react\";\nimport AllPads from \"./components/AllPads\";\nimport ControlRow from \"./components/ControlRow\";\nimport styled from \"styled-components\";\nimport { configure } from \"mobx\";\nimport { observer } from \"mobx-react\";\nimport { StoreContext } from \"./StoreContext\";\nimport { SiBeatsbydre } from \"react-icons/si\";\nimport Records from \"./components/Records\";\nimport background from './background.jpg'\n\nconfigure({\n  useProxies: \"always\",\n});\n\nfunction App() {\n  const store = React.useContext(StoreContext);\n  return (\n    <WholeAppDiv>\n      <HeaderDiv>\n        {\" \"}\n        &#9839; &#9834; Yair's{\" \"}\n        <SiBeatsbydre style={{ paddingbottom: \"25px\" }} />\n        eats Machine &#9835; &#9833;\n      </HeaderDiv>\n      <AppDiv>\n        <ControlRow />\n        {store.isRecorded === \"off\" ? <Records /> : \"\"}\n        <AllPads />\n      </AppDiv>\n    </WholeAppDiv>\n  );\n}\n\nconst AppDiv = styled.div`\n  height: 100vh;\n  width: 100vw;\n  text-align: center;\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  position: relative;\n`;\nconst WholeAppDiv = styled.div`\n  background-image: url(${background});\n  background-size: cover; /* Resize the background image to cover the entire container */\n`\n\nconst HeaderDiv = styled.div`\n  text-align: center;\n  justify-content: center;\n  font-size: 45px;\n  width: 100vw;\n  color: white;\n`;\n\nexport default observer(App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport { StoreContext } from \"./StoreContext\";\nimport { storeInstance } from \"./StoreProvider\";\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\n\nReactDOM.render(\n  <div>\n      <StoreContext.Provider\n       value={storeInstance}>\n        <App />\n      </StoreContext.Provider>\n  </div>,\n  document.getElementById(\"root\"),\n  \n)\n\n;\n\nreportWebVitals();\n\n\n\n\n"],"sourceRoot":""}